// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid()) @map("user_id")
  username   String     @unique
  password   String
  usersRoles UserRole[] // 1 user có nhiều role
  avatar     File?
  fullName   String?    @map("full_name")
  status     UserStatus @default(ACTIVE)

  Student Student[]
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum RoleName {
  ADMIN
  STUDENT
}

model Role {
  id        String     @id @default(uuid()) @map("role_id")
  name      RoleName   @unique
  userRoles UserRole[] // 1 role có nhiều user 

  @@map("roles")
}

model UserRole {
  userId String @map("user_id")
  roleId String @map("role_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // 1 user có nhiều role
  role   Role   @relation(fields: [roleId], references: [id]) // 1 role có nhiều user

  @@id([userId, roleId])
  @@map("user_roles")
}

model File {
  id        String   @id @default(uuid()) @map("file_id")
  name      String   @unique
  url       String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique

  @@map("files")
}

model Subject {
  id         String  @id @default(uuid()) @map("subject_id")
  name       String  @unique
  numCredits Int     @map("num_credits")
  scores     Score[] // 1 môn học có nhiều điểm

  deletedAt DateTime? @map("deleted_at")

  @@unique([name, deletedAt])
  @@map("subjects")
}

model Class {
  id           String    @id @default(uuid()) @map("class_id")
  name         String    @unique
  academicYear Int       @map("academic_year")
  students     Student[] // 1 lớp có nhiều sinh viên 

  @@unique([name, academicYear]) // 1 lớp chỉ có 1 niên khóa
  @@map("classes")
}

model Student {
  mssv    String  @id @map("mssv")
  name    String
  address String
  classId String  @map("class_id")
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade) // 1 sinh viên chỉ thuộc 1 lớp
  scores  Score[]
  userId  String  @map("user_id")
  user    User    @relation(fields: [userId], references: [id])

  @@map("students")
}

model Score {
  id    String @id @default(uuid()) @map("score_id")
  score Float?

  studentId String  @map("mssv")
  subjectId String  @map("subject_id")
  student   Student @relation(fields: [studentId], references: [mssv], onDelete: Cascade) // 1 điểm thuộc 1 sinh viên
  subject   Subject @relation(fields: [subjectId], references: [id]) // 1 điểm thuộc 1 môn học

  @@unique([studentId, subjectId]) // 1 sinh viên chỉ có 1 điểm cho 1 môn học
  @@map("scores")
}
